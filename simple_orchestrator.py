"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π AI Orchestrator MVP –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"""

import streamlit as st
import ollama
import json
from datetime import datetime
import time
import requests

st.set_page_config(page_title="AI Orchestrator MVP", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ AI Orchestrator MVP - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
st.markdown("### Multi-AI —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama
def check_ollama():
    try:
        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API –Ω–∞–ø—Ä—è–º—É—é
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            data = response.json()
            model_names = [m['name'] for m in data.get('models', [])]
            return True, model_names
        else:
            return False, []
    except requests.exceptions.RequestException:
        # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        try:
            models = ollama.list()
            return True, [m['name'] for m in models['models']]
        except Exception as e:
            return False, []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def run_task(task, model="llama3.2:3b", iterations=3):
    results = []
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i in range(iterations):
        status_text.text(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞—á—É...")
        
        prompt = f"""
        –ó–ê–î–ê–ß–ê: {task}
        
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –í—ã–ø–æ–ª–Ω–∏ —ç—Ç—É –∑–∞–¥–∞—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.
        –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ - –Ω–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥.
        
        –í–ê–ñ–ù–û: –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ø—Ä–∏–º–µ–Ω–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        
        try:
            response = ollama.generate(model=model, prompt=prompt)
            result = response['response']
            results.append({
                "iteration": i + 1,
                "result": result,
                "model": model,
                "timestamp": datetime.now().isoformat()
            })
        except Exception as e:
            results.append({
                "iteration": i + 1,
                "result": f"–û—à–∏–±–∫–∞: {str(e)}",
                "model": model,
                "timestamp": datetime.now().isoformat()
            })
        
        progress_bar.progress((i + 1) / iterations)
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è UI
    
    status_text.text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    return results

# UI
ollama_ok, available_models = check_ollama()

if not ollama_ok:
    st.error("‚ùå Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `ollama serve`")
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    selected_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
        available_models if available_models else ["–ù–µ—Ç –º–æ–¥–µ–ª–µ–π"]
    )
    
    iterations = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", 1, 5, 2)
    
    st.markdown("---")
    st.markdown("### üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for model in available_models:
        st.text(f"‚Ä¢ {model}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2, tab3 = st.tabs(["üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üí° –ü—Ä–∏–º–µ—Ä—ã"])

with tab1:
    task_input = st.text_area(
        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É",
        height=200,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç..."
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", type="primary"):
            if task_input and selected_model != "–ù–µ—Ç –º–æ–¥–µ–ª–µ–π":
                with st.spinner("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç..."):
                    results = run_task(task_input, selected_model, iterations)
                    st.session_state['results'] = results
                    st.success("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                    st.balloons()
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞")

with tab2:
    if 'results' in st.session_state:
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        for i, result in enumerate(st.session_state['results']):
            with st.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {result['iteration']} - {result['model']}"):
                st.text(f"–í—Ä–µ–º—è: {result['timestamp']}")
                st.markdown("---")
                st.markdown(result['result'])
                
                # –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å –∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                if "```" in result['result']:
                    st.markdown("### üíª –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥:")
                    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É ```
                    code_blocks = result['result'].split("```")
                    for j in range(1, len(code_blocks), 2):
                        if j < len(code_blocks):
                            code = code_blocks[j]
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
                            lines = code.split('\n')
                            lang = lines[0] if lines else 'text'
                            code_content = '\n'.join(lines[1:]) if len(lines) > 1 else code
                            st.code(code_content, language=lang)
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

with tab3:
    st.header("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á")
    
    example_tasks = {
        "–ö—Ä–∏–ø—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä": """–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ USDT –Ω–∞ –±–∏—Ä–∂–∞—Ö:
- RAPIRA.net: API https://api.rapira.net/market/exchange-plate-mini?symbol=USDT/RUB
- GRINEX: API https://grinex.io/api/v2/depth?market=usdtrub
- –†–∞—Å—Å—á–∏—Ç–∞–π bid/ask –¥–ª—è –æ–±—ä–µ–º–∞ $50,000
- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥""",
        
        "REST API": """–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π REST API –Ω–∞ Python —Å Flask:
- Endpoint GET /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- Endpoint POST /users - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- Endpoint GET /users/<id> - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ò—Å–ø–æ–ª—å–∑—É–π JSON –¥–ª—è –¥–∞–Ω–Ω—ã—Ö""",
        
        "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": """–°–æ–∑–¥–∞–π –≤–µ–±-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ HTML/CSS/JavaScript:
- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: +, -, *, /
- –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
- –ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ"""
    }
    
    for name, task in example_tasks.items():
        if st.button(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {name}"):
            st.session_state['example_task'] = task
            st.info(f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –≤ –ø–æ–ª–µ –∑–∞–¥–∞—á–∏:\n\n{task}")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <p>üöÄ AI Orchestrator MVP | –°–æ–∑–¥–∞–Ω–æ –∑–∞ 1 –¥–µ–Ω—å —Å Ollama</p>
        <p style='font-size: 12px; color: gray;'>
        –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á
        </p>
    </div>
    """,
    unsafe_allow_html=True
)