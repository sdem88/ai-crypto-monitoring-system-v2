"""
Multi-Provider AI Orchestrator —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenAI, Google, Anthropic
"""

import streamlit as st
import os
from dotenv import load_dotenv
from datetime import datetime
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv()

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from secure_config import SecureConfig

# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
try:
    import openai
except:
    openai = None

try:
    import google.generativeai as genai
except:
    genai = None

try:
    import anthropic
except:
    anthropic = None

try:
    import ollama
except:
    ollama = None

class MultiProviderOrchestrator:
    def __init__(self):
        self.providers = self._init_providers()
        
    def _init_providers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        providers = {}
        
        # Ollama (–ª–æ–∫–∞–ª—å–Ω—ã–π)
        if ollama:
            try:
                models = ollama.list()
                providers['ollama'] = {
                    'client': ollama,
                    'models': [m['name'] for m in models['models']],
                    'name': 'Ollama (–õ–æ–∫–∞–ª—å–Ω—ã–π)'
                }
            except:
                pass
        
        # OpenAI
        if openai and SecureConfig.get_openai_key():
            try:
                openai.api_key = SecureConfig.get_openai_key()
                providers['openai'] = {
                    'client': openai,
                    'models': [
                        'o1',  # –°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
                        'o1-mini',  # –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è o1
                        'gpt-4o',  # GPT-4 Omni (–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è)
                        'gpt-4-turbo',  # GPT-4 Turbo
                        'gpt-4',  # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π GPT-4
                        'gpt-3.5-turbo'  # –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è
                    ],
                    'name': 'OpenAI'
                }
            except:
                pass
        
        # Google Gemini
        if genai and SecureConfig.get_google_key():
            try:
                genai.configure(api_key=SecureConfig.get_google_key())
                providers['google'] = {
                    'client': genai,
                    'models': [
                        'gemini-2.0-flash-exp',  # Gemini 2.0 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è
                        'gemini-1.5-pro-002',  # Gemini 1.5 Pro –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è
                        'gemini-1.5-pro',  # Gemini 1.5 Pro
                        'gemini-1.5-flash',  # –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è
                        'gemini-pro'  # –ë–∞–∑–æ–≤–∞—è Pro –≤–µ—Ä—Å–∏—è
                    ],
                    'name': 'Google Gemini'
                }
            except:
                pass
        
        # Anthropic Claude
        if anthropic and SecureConfig.get_anthropic_key():
            try:
                client = anthropic.Anthropic(api_key=SecureConfig.get_anthropic_key())
                providers['anthropic'] = {
                    'client': client,
                    'models': [
                        'claude-3-5-sonnet-20241022',  # Claude 3.5 Sonnet (—Å–∞–º–∞—è –º–æ—â–Ω–∞—è)
                        'claude-3-opus-20240229',  # Claude 3 Opus
                        'claude-3-sonnet-20240229',  # Claude 3 Sonnet
                        'claude-3-5-haiku-20241022',  # Claude 3.5 Haiku (–±—ã—Å—Ç—Ä–∞—è)
                        'claude-3-haiku-20240307'  # Claude 3 Haiku
                    ],
                    'name': 'Anthropic Claude'
                }
            except:
                pass
        
        return providers
    
    def generate(self, prompt, provider, model, temperature=0.7):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        
        try:
            if provider == 'ollama':
                response = ollama.generate(model=model, prompt=prompt)
                return response['response']
            
            elif provider == 'openai':
                response = openai.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=temperature
                )
                return response.choices[0].message.content
            
            elif provider == 'google':
                model_obj = genai.GenerativeModel(model)
                response = model_obj.generate_content(prompt)
                return response.text
            
            elif provider == 'anthropic':
                client = self.providers['anthropic']['client']
                response = client.messages.create(
                    model=model,
                    max_tokens=4096,
                    temperature=temperature,
                    messages=[{"role": "user", "content": prompt}]
                )
                return response.content[0].text
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    def run_multi_provider_task(self, task, selected_models, iterations=1):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        
        results = []
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""
        üß† –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
        1. –û–±–¥—É–º–∞–π –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        2. –ü—Ä–æ–≤–µ—Ä—å —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        3. –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        –ó–ê–î–ê–ß–ê: {task}
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
        - –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥, –Ω–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥
        - –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        - –£—á—Ç–∏ –≤—Å–µ edge cases
        """
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        for model_key in selected_models:
            provider_key, model = model_key.split(':', 1)
            
            if provider_key in self.providers:
                provider_info = self.providers[provider_key]
                st.info(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ {model} ({provider_info['name']})...")
                
                for i in range(iterations):
                    with st.spinner(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1} —Å {model}..."):
                        result = self.generate(prompt, provider_key, model)
                        
                        results.append({
                            'provider': provider_info['name'],
                            'model': model,
                            'iteration': i + 1,
                            'result': result,
                            'timestamp': datetime.now().isoformat()
                        })
        
        return results

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="Multi-Provider AI Orchestrator", page_icon="üåê", layout="wide")

st.title("üåê Multi-Provider AI Orchestrator")
st.markdown("### –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—â—å –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if not os.path.exists('.env'):
    st.warning("""
    ‚ö†Ô∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π:**
    1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ `.env.example` –≤ `.env`
    2. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ –≤ `.env`
    3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
orchestrator = MultiProviderOrchestrator()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üîë –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    for provider_key, provider_info in orchestrator.providers.items():
        st.success(f"‚úÖ {provider_info['name']}")
        with st.expander(f"–ú–æ–¥–µ–ª–∏ {provider_info['name']}"):
            for model in provider_info['models']:
                st.text(f"‚Ä¢ {model}")
    
    if not orchestrator.providers:
        st.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!")
    
    st.markdown("---")
    
    iterations = st.slider("–ò—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", 1, 3, 1)
    
    st.markdown("---")
    st.markdown("### üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    st.markdown("""
    - **Ollama**: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
    - **GPT-4o**: ~$0.01-0.05 –∑–∞ –∑–∞–ø—Ä–æ—Å
    - **Gemini**: ~$0.001-0.01 –∑–∞ –∑–∞–ø—Ä–æ—Å
    - **Claude**: ~$0.01-0.03 –∑–∞ –∑–∞–ø—Ä–æ—Å
    """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2, tab3 = st.tabs(["üöÄ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

with tab1:
    st.header("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    
    # –ü—Ä–∏–º–µ—Ä—ã
    example = st.selectbox(
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á",
        [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
            "–ö—Ä–∏–ø—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏",
            "AI —á–∞—Ç-–±–æ—Ç —Å –ø–∞–º—è—Ç—å—é",
            "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å ML"
        ]
    )
    
    if example == "–ö—Ä–∏–ø—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏":
        default_task = """–°–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:
1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ BTC, ETH, USDT
2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å Chart.js
3. –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤
4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ localStorage"""
    else:
        default_task = ""
    
    task = st.text_area(
        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É",
        value=default_task,
        height=200
    )
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    st.subheader("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
    
    selected_models = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if 'openai' in orchestrator.providers:
            st.markdown("**üü¢ OpenAI**")
            openai_models = orchestrator.providers['openai']['models']
            for model in openai_models:
                if st.checkbox(model, key=f"openai:{model}"):
                    selected_models.append(f"openai:{model}")
    
    with col2:
        if 'google' in orchestrator.providers:
            st.markdown("**üîµ Google Gemini**")
            google_models = orchestrator.providers['google']['models']
            for model in google_models:
                if st.checkbox(model, key=f"google:{model}"):
                    selected_models.append(f"google:{model}")
    
    with col3:
        if 'anthropic' in orchestrator.providers:
            st.markdown("**üü£ Anthropic Claude**")
            anthropic_models = orchestrator.providers['anthropic']['models']
            for model in anthropic_models:
                if st.checkbox(model, key=f"anthropic:{model}"):
                    selected_models.append(f"anthropic:{model}")
    
    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
    col_quick1, col_quick2, col_quick3 = st.columns(3)
    with col_quick1:
        if st.button("‚ö° –°–∞–º—ã–µ –º–æ—â–Ω—ã–µ"):
            selected_models = [
                "openai:o1",
                "google:gemini-2.0-flash-exp",
                "anthropic:claude-3-5-sonnet-20241022"
            ]
            st.rerun()
    
    with col_quick2:
        if st.button("üöÄ –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ"):
            selected_models = [
                "openai:gpt-3.5-turbo",
                "google:gemini-1.5-flash",
                "anthropic:claude-3-5-haiku-20241022"
            ]
            st.rerun()
    
    with col_quick3:
        if st.button("üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ"):
            selected_models = [
                "openai:gpt-4o",
                "google:gemini-1.5-pro",
                "anthropic:claude-3-5-sonnet-20241022"
            ]
            st.rerun()
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏", type="primary"):
        if task and selected_models:
            with st.spinner(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {len(selected_models)} –º–æ–¥–µ–ª—è–º–∏..."):
                results = orchestrator.run_multi_provider_task(task, selected_models, iterations)
                st.session_state['results'] = results
                st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
                st.balloons()
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å")

with tab2:
    st.header("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if 'results' in st.session_state:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        providers_results = {}
        for result in st.session_state['results']:
            provider = result['provider']
            if provider not in providers_results:
                providers_results[provider] = []
            providers_results[provider].append(result)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cols = st.columns(len(providers_results))
        
        for i, (provider, results) in enumerate(providers_results.items()):
            with cols[i]:
                st.markdown(f"### {provider}")
                for result in results:
                    with st.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {result['iteration']}"):
                        st.markdown(result['result'])
                        
                        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ
                        if st.button(f"‚≠ê –í—ã–±—Ä–∞—Ç—å –∫–∞–∫ –ª—É—á—à–∏–π", key=f"{provider}_{result['iteration']}"):
                            st.session_state['best_result'] = result
                            st.success("–í—ã–±—Ä–∞–Ω–æ –∫–∞–∫ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        
        # –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'best_result' in st.session_state:
            st.markdown("---")
            st.markdown("### üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            best = st.session_state['best_result']
            st.info(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {best['provider']} | –ú–æ–¥–µ–ª—å: {best['model']}")
            st.markdown(best['result'])
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
                filename = f"best_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"# –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n")
                    f.write(f"**–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** {best['provider']}\n")
                    f.write(f"**–ú–æ–¥–µ–ª—å:** {best['model']}\n")
                    f.write(f"**–í—Ä–µ–º—è:** {best['timestamp']}\n\n")
                    f.write(best['result'])
                st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

with tab3:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    
    st.warning("""
    ‚ö†Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
    - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–≤–æ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –ø—Ä—è–º–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª `.env` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    - –ù–µ –∫–æ–º–º–∏—Ç—å—Ç–µ `.env` –≤ Git
    """)
    
    st.markdown("### üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
    
    st.code("""
# 1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
# 2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏:

OPENAI_API_KEY=sk-...
GOOGLE_API_KEY=AIza...
ANTHROPIC_API_KEY=sk-ant-...

# 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """, language='bash')
    
    st.markdown("### üîó –ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏")
    st.markdown("""
    - **OpenAI**: [platform.openai.com](https://platform.openai.com/api-keys)
    - **Google**: [console.cloud.google.com](https://console.cloud.google.com)
    - **Anthropic**: [console.anthropic.com](https://console.anthropic.com)
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>üåê Multi-Provider AI Orchestrator | –û–±—ä–µ–¥–∏–Ω—è—è –º–æ—â—å –≤—Å–µ—Ö AI</p>
    <p style='font-size: 12px; color: gray;'>
    –ü–æ–º–Ω–∏—Ç–µ: —Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
    </p>
</div>
""", unsafe_allow_html=True)