"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI Orchestrator —Å CrewAI –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
"""

import streamlit as st
from crewai import Agent, Task, Crew, Process
from langchain.llms import Ollama
import json
from datetime import datetime
import os

st.set_page_config(page_title="AI Orchestrator Pro", page_icon="üöÄ", layout="wide")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
UNIVERSAL_PROMPT = """
üß† –§–£–ù–î–ê–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –ú–´–®–õ–ï–ù–ò–Ø
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–ê–£–ó–ê –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
–ü–µ—Ä–µ–¥ –ö–ê–ñ–î–´–ú –æ—Ç–≤–µ—Ç–æ–º:
* –°–¢–û–ü ‚Üí –ü–∞—É–∑–∞ –¥–ª—è –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è
* –°–æ–∑–¥–∞–π —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
* –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
* –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–ª–∞–Ω–µ: __%

2. TRIPLE VERIFICATION
–ü—Ä–æ–≤–µ—Ä–∫–∞ 1 - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ‚Üí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: __%
–ü—Ä–æ–≤–µ—Ä–∫–∞ 2 - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è ‚Üí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: __%
–ü—Ä–æ–≤–µ—Ä–∫–∞ 3 - –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Üí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: __%

3. –£–†–û–í–ù–ò –£–í–ï–†–ï–ù–ù–û–°–¢–ò
95-100%: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
85-94%: –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
<85%: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

–ó–ê–î–ê–ß–ê: {task}
–ö–û–ù–¢–ï–ö–°–¢: {context}
"""

class AdvancedOrchestrator:
    def __init__(self):
        self.history = []
        
    def create_agents(self, model="llama3.2:3b"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        
        # LLM –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        llm = Ollama(model=model, temperature=0.1)
        
        # –ê–≥–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫
        analyst = Agent(
            role='–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫',
            goal='–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            backstory='Senior –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –æ–ø—ã—Ç–æ–º McKinsey, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á',
            llm=llm,
            verbose=True,
            allow_delegation=False
        )
        
        # –ê–≥–µ–Ω—Ç-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä
        architect = Agent(
            role='–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π',
            goal='–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è',
            backstory='Principal –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å 15+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º',
            llm=llm,
            verbose=True,
            allow_delegation=False
        )
        
        # –ê–≥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
        developer = Agent(
            role='Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            goal='–ù–∞–ø–∏—Å–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ',
            backstory='Senior developer, –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä open-source –ø—Ä–æ–µ–∫—Ç–æ–≤',
            llm=llm,
            verbose=True,
            allow_delegation=False
        )
        
        # –ê–≥–µ–Ω—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫
        tester = Agent(
            role='QA –∏–Ω–∂–µ–Ω–µ—Ä',
            goal='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è',
            backstory='Lead QA —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            llm=llm,
            verbose=True,
            allow_delegation=False
        )
        
        return [analyst, architect, developer, tester]
    
    def create_tasks(self, task_description, agents):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        analyst, architect, developer, tester = agents
        
        # –ó–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_task = Task(
            description=UNIVERSAL_PROMPT.format(
                task=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –¢–ó: {task_description}",
                context="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–µ—Å—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∏ edge cases"
            ),
            expected_output="–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏",
            agent=analyst
        )
        
        # –ó–∞–¥–∞—á–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        architecture_task = Task(
            description=UNIVERSAL_PROMPT.format(
                task="–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ó –æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                context="–§–æ–∫—É—Å –Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            ),
            expected_output="–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
            agent=architect
        )
        
        # –ó–∞–¥–∞—á–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        development_task = Task(
            description=UNIVERSAL_PROMPT.format(
                task="–ù–∞–ø–∏—à–∏ –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞",
                context="–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å production-ready —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"
            ),
            expected_output="–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏",
            agent=developer
        )
        
        # –ó–∞–¥–∞—á–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testing_task = Task(
            description=UNIVERSAL_PROMPT.format(
                task="–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è",
                context="–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ best practices"
            ),
            expected_output="–û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏",
            agent=tester
        )
        
        return [analysis_task, architecture_task, development_task, testing_task]
    
    def run_crew(self, task_description, model="llama3.2:3b", iterations=1):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        
        results = []
        
        for i in range(iterations):
            st.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∑–∞–¥–∞—á–∏
            agents = self.create_agents(model)
            tasks = self.create_tasks(task_description, agents)
            
            # –°–æ–∑–¥–∞–µ–º Crew
            crew = Crew(
                agents=agents,
                tasks=tasks,
                process=Process.sequential,
                verbose=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            with st.spinner(f"–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏—Ç–µ—Ä–∞—Ü–∏–µ–π {i+1}..."):
                try:
                    result = crew.kickoff()
                    results.append({
                        "iteration": i + 1,
                        "result": str(result),
                        "timestamp": datetime.now().isoformat(),
                        "model": model
                    })
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}: {str(e)}")
                    results.append({
                        "iteration": i + 1,
                        "result": f"–û—à–∏–±–∫–∞: {str(e)}",
                        "timestamp": datetime.now().isoformat(),
                        "model": model
                    })
        
        return results
    
    def save_results(self, results, task_description):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"results_{timestamp}.json"
        
        data = {
            "task": task_description,
            "timestamp": datetime.now().isoformat(),
            "results": results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return filename

# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üöÄ AI Orchestrator Pro - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è")
st.markdown("### Multi-agent —Å–∏—Å—Ç–µ–º–∞ —Å CrewAI –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if 'orchestrator' not in st.session_state:
    st.session_state.orchestrator = AdvancedOrchestrator()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
    try:
        import ollama
        models = ollama.list()
        available_models = [m['name'] for m in models['models']]
        model = st.selectbox("AI –ú–æ–¥–µ–ª—å", available_models)
    except:
        st.error("Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        available_models = []
        model = None
    
    iterations = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", 1, 3, 1)
    
    st.markdown("---")
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á", len(st.session_state.orchestrator.history))

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2, tab3, tab4 = st.tabs(["üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "ü§ñ –ê–≥–µ–Ω—Ç—ã", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìö –ò—Å—Ç–æ—Ä–∏—è"])

with tab1:
    st.header("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
    example = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É",
        [
            "–°–≤–æ—è –∑–∞–¥–∞—á–∞",
            "–ö—Ä–∏–ø—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä USDT (RAPIRA + GRINEX)",
            "REST API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
            "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"
        ]
    )
    
    if example == "–ö—Ä–∏–ø—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä USDT (RAPIRA + GRINEX)":
        default_task = """–°–æ–∑–¥–∞–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ USDT:
1. RAPIRA.net - –ø–∞—Ä–∞ USDT/RUB
   API: https://api.rapira.net/market/exchange-plate-mini?symbol=USDT/RUB
2. GRINEX - –ø–∞—Ä—ã USDT/RUB –∏ USDT/A7A5
   API: https://grinex.io/api/v2/depth?market=usdtrub
3. –†–∞—Å—Å—á–∏—Ç–∞–π bid/ask –¥–ª—è –æ–±—ä–µ–º–∞ $50,000
4. –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
5. –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    else:
        default_task = ""
    
    task_input = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
        value=default_task,
        height=200,
        placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å..."
    )
    
    col1, col2, col3 = st.columns([1, 1, 3])
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", type="primary", disabled=not model):
            if task_input:
                results = st.session_state.orchestrator.run_crew(
                    task_input, 
                    model=model,
                    iterations=iterations
                )
                st.session_state['current_results'] = results
                st.session_state.orchestrator.history.append({
                    "task": task_input,
                    "results": results,
                    "timestamp": datetime.now()
                })
                st.success("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                st.balloons()
    
    with col2:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            if 'current_results' in st.session_state:
                filename = st.session_state.orchestrator.save_results(
                    st.session_state['current_results'],
                    task_input
                )
                st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")

with tab2:
    st.header("ü§ñ –ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤")
    
    agents_info = [
        {
            "role": "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫",
            "icon": "üîç",
            "skills": ["–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", "–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á", "–°–æ–∑–¥–∞–Ω–∏–µ –¢–ó"],
            "approach": "McKinsey Framework"
        },
        {
            "role": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π",
            "icon": "üèóÔ∏è",
            "skills": ["–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º", "–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
            "approach": "TOGAF –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è"
        },
        {
            "role": "Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "icon": "üíª",
            "skills": ["Frontend/Backend", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"],
            "approach": "Clean Code –ø—Ä–∏–Ω—Ü–∏–ø—ã"
        },
        {
            "role": "QA –∏–Ω–∂–µ–Ω–µ—Ä",
            "icon": "üîß",
            "skills": ["–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Code review", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
            "approach": "Shift-left testing"
        }
    ]
    
    cols = st.columns(2)
    for i, agent in enumerate(agents_info):
        with cols[i % 2]:
            st.markdown(f"### {agent['icon']} {agent['role']}")
            st.markdown(f"**–ü–æ–¥—Ö–æ–¥:** {agent['approach']}")
            st.markdown("**–ù–∞–≤—ã–∫–∏:**")
            for skill in agent['skills']:
                st.markdown(f"- {skill}")

with tab3:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if 'current_results' in st.session_state:
        for result in st.session_state['current_results']:
            with st.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {result['iteration']} - {result['timestamp']}"):
                st.markdown(result['result'])
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞
                if "```" in result['result']:
                    st.markdown("### üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:")
                    code_blocks = result['result'].split("```")
                    for i in range(1, len(code_blocks), 2):
                        if i < len(code_blocks):
                            code = code_blocks[i]
                            lines = code.split('\n')
                            lang = lines[0] if lines else 'text'
                            code_content = '\n'.join(lines[1:]) if len(lines) > 1 else code
                            st.code(code_content, language=lang)
                            
                            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                            if st.button(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ {i//2 + 1}", key=f"copy_{result['iteration']}_{i}"):
                                st.write("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

with tab4:
    st.header("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á")
    
    if st.session_state.orchestrator.history:
        for i, item in enumerate(reversed(st.session_state.orchestrator.history)):
            with st.expander(f"{item['timestamp'].strftime('%Y-%m-%d %H:%M')} - {item['task'][:50]}..."):
                st.markdown(f"**–ó–∞–¥–∞—á–∞:** {item['task']}")
                st.markdown(f"**–ò—Ç–µ—Ä–∞—Ü–∏–π:** {len(item['results'])}")
                if st.button(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key=f"load_{i}"):
                    st.session_state['current_results'] = item['results']
                    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <p>üöÄ AI Orchestrator Pro | CrewAI + –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç</p>
        <p style='font-size: 12px; color: gray;'>
        –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç multi-agent –ø–æ–¥—Ö–æ–¥ —Å —Ç—Ä–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞
        </p>
    </div>
    """,
    unsafe_allow_html=True
)